@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@model MainViewModel
@{
    Layout = "~/Views/Shared/_FrontPageLayout.cshtml";
}
@{
    bool isUserLoggedIn = ViewBag.Users != null;
}

<div class="row">
    <div class="column left dx-datagrid-filter-panel" style="width:auto">
        @await Html.PartialAsync("~/Views/Home/_DepartmentList.cshtml", Model.DepartmentList)
    </div>
    <div class="column middle">
        <h2>Main Content</h2>
        @(Html.DevExtreme().Scheduler()
                    .DataSource(d => d.Mvc()
                    .Controller("SchedulerData")
                    .Key("AppointmentId")
                    .LoadAction("Get")
                    .UpdateAction("Put")
                    .InsertAction("Post")
                    .DeleteAction("Delete"))
                    .TextExpr("Description")
                    .StartDateExpr("StartDate")
                    .EndDateExpr("EndDate")
                    //                                                                    .Views(new SchedulerViewType[] { SchedulerViewType.Day, SchedulerViewType.TimelineMonth, SchedulerViewType.WorkWeek, SchedulerViewType.Week, SchedulerViewType.Agenda })
                    .Views(new SchedulerViewType[] { SchedulerViewType.Week, SchedulerViewType.TimelineMonth })
                    .CurrentView(SchedulerViewType.Week)
                    .CurrentDate(new DateTime(2019, 3, 7))
                    .FirstDayOfWeek(FirstDayOfWeek.Sunday)

                    .Option("editing.allowResizing", false)
                    .Option("editing.allowDragging", false)
                    .Option("editing.allowDeleting", isUserLoggedIn)
                    .Option("editing.allowAdding", isUserLoggedIn)
                    .Option("editing.allowUpdating", isUserLoggedIn)



                    .OnContentReady("setDataSource")

                    .StartDayHour(9)
                    .EndDayHour(18)
                    .CellDuration(120)
                    .MaxAppointmentsPerCell(5)
                    .Resources(res =>
                    {
                        res.Add()
                            .FieldExpr("StartPeriod")
                            .AllowMultiple(false)
                            .Label("Start Period")
                            .DataSource
                            (new object[] {
                    //new { id = 0, text = "Morning", color = "#1e90ff" },
                    //new { id = 1, text = "Afternoon", color = "#ff9747" }});

                    new { id = 0, text = "Morning" },
                    new { id = 1, text = "Afternoon" }});


                        res.Add()
                            .FieldExpr("EndPeriod")
                            .AllowMultiple(false)
                            .Label("End Period")
                            .DataSource
                            (new object[] {
                    //new { id = 0, text = "Morning", color = "#1e90ff" },
                    //new { id = 1, text = "Afternoon", color = "#ff9747" }});
                    new { id = 0, text = "Morning"},
                    new { id = 1, text = "Afternoon"}});


                        res.Add()
                            .FieldExpr("StatusKey")
                            .AllowMultiple(false)
                            .Label("Status")
                            .DataSource
                            (new object[] {
                    new { id = 0, text = "Requested"},
                    new { id = 1, text = "Confirmed"},
                    new { id = 2, text = "Denied"}
                            });


                        res.Add()
                                    .FieldExpr("UserID")
                                    .AllowMultiple(false)
                                    .ColorExpr("colorHighlight")
                                    .Label("remove me")
                                    .DataSource(Model.DepartmentUserList.ToList()).DisplayExpr("UserName").ValueExpr("Id");


                        res.Add()
                            .FieldExpr("UserID")
                            .AllowMultiple(false)
                            //.ColorExpr("colorHighlight")
                            .Label("User")
                            .DataSource(Model.UserList.ToList()).DisplayExpr("UserName").ValueExpr("Id");


                    }
                )
                .Height(580)
        )
    </div>
    <div class="column right">
        @await Html.PartialAsync("~/Views/User/_UserStatView.cshtml", Model.DepartmentUserList)
    </div>
</div>

<script>

    @*var AppointmentData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(       ));*@
    var AppointmentData

    function setDataSource(dataSource) {

        //this one fies the event
        //$.post("Home/WebAPIService");

//        $.post("ApiControllers/SchedulerData/Index");       
//        $.post("SchedulerData/Index");       
        //Controller("SchedulerData").GetJSONJQuery()
//        alert(dataSource.typeof);
        //AppointmentData = dataSource
    }

    function getSchedulerInstance() {
        return $("#scheduler").dxScheduler("instance");
    }

    function getMovieById(id) {
        return DevExpress.data.query(moviesData)
                .filter("ID", id)
                .toArray()[0]
    }

    //function appointmentForm_created(data) {
    //    var form = data.form,
    //        movie = getMovieById(data.appointmentData.MovieId) || {},
    //        startDate = data.appointmentData.StartDate,
    //        endDate = data.appointmentData.EndDate,
    //        price = data.appointmentData.Price;

    //    form.option("items", [{
    //        label: {
    //            text: "Movie"
    //        },
    //        editorType: "dxSelectBox",
    //        dataField: "MovieId",
    //        editorOptions: {
    //            dataSource: moviesData,
    //            displayExpr: "Text",
    //            valueExpr: "ID",
    //            value: movie.ID,
    //            onValueChanged: function(args) {
    //                var movieInfo = getMovieById(args.value);

    //                form.getEditor("Director")
    //                    .option("value", movieInfo.Director);

    //                form.getEditor("EndDate")
    //                    .option("value", new Date(startDate.getTime() +
    //                        60 * 1000 * movieInfo.Duration));
    //            }
    //        },
    //    }, {
    //        label: {
    //            text: "Director"
    //        },
    //        name: "Director",
    //        editorType: "dxTextBox",
    //        editorOptions: {
    //            value: movie.Director,
    //            readOnly: true
    //        }
    //    }, {
    //        dataField: "StartDate",
    //        editorType: "dxDateBox",
    //        editorOptions: {
    //            value: startDate,
    //            width: "100%",
    //            type: "datetime",
    //            onValueChanged: function(args) {
    //                startDate = args.value;
    //                form.getEditor("EndDate")
    //                    .option("value", new Date(startDate.getTime() +
    //                        60 * 1000 * movie.Duration));
    //            }
    //        }
    //    }, {
    //        name: "EndDate",
    //        dataField: "EndDate",
    //        editorType: "dxDateBox",
    //        editorOptions: {
    //            value: endDate,
    //            width: "100%",
    //            type: "datetime",
    //            readOnly: true
    //        }
    //    }, {
    //        dataField: "Price",
    //        editorType: "dxRadioGroup",
    //        editorOptions: {
    //            dataSource: [5, 10, 15, 20],
    //            itemTemplate: function(itemData) {
    //                return "$" + itemData;
    //            },
    //            value: price
    //        }
    //    }
    //    ]);
    //}


</script>




