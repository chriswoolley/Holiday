@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@model IEnumerable<Appointment>
@inject UserManager<HolidayUser> userManager
@inject SignInManager<HolidayUser> SignInManager
@inject IRuntime runtime



@{
    bool isUserLoggedIn = ViewBag.Users != null;
    string currentID = runtime.currentUserId;
}



<script type="text/javascript">
    var currentUserId = '@runtime.currentUserId';
    @*var isSignedIn = '@(SignInManager.IsSignedIn(User))';
    var adminSignedIn = '@(SignInManager.IsSignedIn(User) && User.IsInRole("Admin"))';*@
</script>

<div class="row">

    <h2></h2>

    <br />





    @(Html.DevExtreme().Scheduler()
                        .ID("scheduler")
                        .DataSource(Model)
                        .TextExpr("Description")
                        .StartDateExpr("StartDate")
                        .EndDateExpr("EndDate")
                        //.Disabled($isSignedIn)
                        //                                                                    .Views(new SchedulerViewType[] { SchedulerViewType.Day, SchedulerViewType.TimelineMonth, SchedulerViewType.WorkWeek, SchedulerViewType.Week, SchedulerViewType.Agenda })
                        .Views(new SchedulerViewType[] { SchedulerViewType.Week })
                        .CurrentView(SchedulerViewType.Week)
                        .CurrentDate(new DateTime(2019, 3, 7))
                        .FirstDayOfWeek(FirstDayOfWeek.Sunday)
//                        .Editing()

                        .OnAppointmentClick("SetProtection")
                        .OnAppointmentDblClick("SetProtection")

                        .Option("editing.allowResizing", false)
                        .Option("editing.allowDragging", false)
                        .OnAppointmentAdded("InsertData")
                        .OnAppointmentUpdated("EditedData")

                        .StartDayHour(9)
                        .EndDayHour(18)
                        .CellDuration(120)
                        .MaxAppointmentsPerCell(5)
                        .OnAppointmentFormOpening("appointmentForm_created")


                        .Resources(res =>
                        {
                            res.Add()
                            .FieldExpr("StartPeriod")
                            .AllowMultiple(false)
                            .Label("Start Period")
                            .DataSource
                            (new object[] {

new { id = 0, text = "Morning" },
new { id = 1, text = "Afternoon" }});

                            res.Add()
                            .FieldExpr("EndPeriod")
                            .AllowMultiple(false)
                            .Label("End Period")
                            .DataSource
                            (new object[] {
new { id = 0, text = "Morning"},
new { id = 1, text = "Afternoon"}});

                            res.Add()
                            .FieldExpr("StatusKey")
                            .AllowMultiple(false)
                            .Label("Status")
                            .DataSource
                            (new object[] {
new { id = 0, text = "Requested"},
new { id = 1, text = "Confirmed"},
new { id = 2, text = "Denied"}
                                                                                                                                                                                                                                                                        });

                            res.Add()
                            .FieldExpr("UserID")
                            .AllowMultiple(false)
                            .ColorExpr("colorHighlight")
                            .Label("remove me")
                            .DataSource(userManager.Users.ToList()).DisplayExpr("UserName").ValueExpr("Id");

                            res.Add()
                            .FieldExpr("UserID")
                            .AllowMultiple(false)
                            .Label("User")
                            .DataSource(userManager.Users.ToList()).DisplayExpr("UserName").ValueExpr("Id");

                        }
                        ).Height(580)
    )

    currentid @currentID
    signed in and admin @(SignInManager.IsSignedIn(User) && User.IsInRole("Admin"))
</div>

<script>

    var HolidayAppointmentData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

    var Users = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(userManager.Users));

//    var test1 = $runtime.currentUserId;


    function getSchedulerInstance() {
        return $("#scheduler").dxScheduler("instance");
    }

    function getAppointmentById(id) {
        return DevExpress.data.query(HolidayAppointmentData)
            .filter("AppointmentId", id)
            .toArray()[0]
    }


    function SetProtection(data) {
        scheduler = $("#scheduler").dxScheduler("instance");
    }


    function appointmentForm_created(data) {
        var form = data.form,
            HolidayAppointment = getAppointmentById(data.appointmentData.AppointmentId) || {},
            startDate = data.appointmentData.StartDate,
            endDate = data.appointmentData.EndDate,
            users = Users;
        // defulat state
        DisplayReadOnly = false;
        NewAppointmentOrAdminReadState = true;

        var isSignedIn = '@(SignInManager.IsSignedIn(User))';
        var adminSignedIn = '@(SignInManager.IsSignedIn(User) && User.IsInRole("Admin"))';

        var option = 0;
        SelectUserId = "";
        if (HolidayAppointment.AppointmentId == undefined) {
            SelectUserId = currentUserId;
            SelectTypeId = 0;
            DisplayReadOnly = true;
            option = 1;
            //if we do this we need to sort the times out, like in homecontrol
            //HolidayAppointment.StartPeriod = 0;
            //HolidayAppointment.EndPeriod = 1;
            NewAppointmentOrAdminReadState = true;
            if (adminSignedIn == "True") {
                option = option + 2;
                DisplayReadOnly = false;
                NewAppointmentOrAdminReadState = false;
            }
            else {
                option = option + 4;
                DisplayReadOnly = true;
                NewAppointmentOrAdminReadState = false;
            }

        }
        else {
            SelectUserId = HolidayAppointment.UserID;
            SelectTypeId = HolidayAppointment.StatusKey;
            option = option + 8;
            if (adminSignedIn == "True") {
                DisplayReadOnly = false;
                NewAppointmentOrAdminReadState = false;
                option = option + 16;
            }
            else {
                DisplayReadOnly = (true) && (SelectTypeId = 0);
                NewAppointmentOrAdminReadState = false;
                option = option + 32;
            }
        }


        if (isSignedIn == "False") {
            option = option + 64;
            DisplayReadOnly = true;
            NewAppointmentOrAdminReadState = true;
            //form.OptionsCustomization("AllowAppointmentEdit", [false]);
        }

        //Default state
        //ViewOnly = true;

        showToast2("option:" + option + " currentUserId:" + currentUserId + " isSignedIn:" + isSignedIn + " adminSignedIn:" + adminSignedIn + " DisplayReadOnly:" + DisplayReadOnly + " NewAppointmentOrAdminReadState:" + NewAppointmentOrAdminReadState);
        form.option(
            "items", [
                {
                    dataField: "UserID",
                    editorType: "dxSelectBox",
                    name: "userEditor",
                    editorOptions: {
                        dataSource: Users,
                        displayExpr: "UserName",
                        valueExpr: "Id",
                        value: SelectUserId,
                        readOnly: DisplayReadOnly
                }
            }
            ,
            {
                dataField: "StartDate",
                editorType: "dxDateBox",
                name: "startDateEditor",
                editorOptions: {
                    value: startDate,
                    width: "100%",
                    type: "date",
                    readOnly: NewAppointmentOrAdminReadState,
                    editorOptions: { format:"date"},
                    onValueChanged: function (args) {
                        startDate = args.value;
                    }
                }
                }
            ,
            {
                dataField: "StartPeriod",
                editorType: "dxSelectBox",
                editorOptions: {
                    dataSource: [{ "ID": 0, "periodName": "Morning" }, { "ID": 1, "periodName": "Afternoon" }],
                    valueExpr: "ID",
                    displayExpr: "periodName",
                    readOnly: NewAppointmentOrAdminReadState,
                    value: HolidayAppointment.StartPeriod,
                    onValueChanged: function (args) {
                        var startDate = data.appointmentData.StartDate;
                        var startEditor = form.getEditor("startDate");
                        var year = startDate.getFullYear();
                        var month = startDate.getMonth();
                        var day = startDate.getDate();
                        if (args.value === 0) {
                            data.appointmentData.startDate = new Date(year, month, day, 9, 0, 0, 0);

                        }
                        else {
                            data.appointmentData.startDate = new Date(year, month, day, 13, 0, 0, 0);
                        }
                        var testDate = data.appointmentData.startDate;
                        form.getEditor("startDateEditor").option("value", testDate);
                        //showToast("Holiday start time set to " + testDate, testDate, "info");
                    }
                }
            }

            ,
            {
                dataField: "EndDate",
                editorType: "dxDateBox",
                name: "endDateEditor",
                editorOptions: {
                    value: endDate,
                    width: "100%",
                    type: "datetime",
                    readOnly: NewAppointmentOrAdminReadState,
                    onValueChanged: function (args) {
                    }
                }
            }

                ,
                {
                    dataField: "EndPeriod",
                    editorType: "dxSelectBox",
                    helpText: "when it ends",
                    editorOptions: {
                        dataSource: [{ "ID": 0, "periodName": "Morning" }, { "ID": 1, "periodName": "Afternoon" }],
                        valueExpr: "ID",
                        displayExpr: "periodName",
                        readOnly: NewAppointmentOrAdminReadState,
                        value: HolidayAppointment.EndPeriod,
                        onValueChanged: function (args) {
                            var endDate = data.appointmentData.EndDate;
                            var startEditor = form.getEditor("startDate");
                            var year = startDate.getFullYear();
                            var month = startDate.getMonth();
                            var day = startDate.getDate();
                            if (args.value === 0) {
                                data.appointmentData.endDate = new Date(year, month, day, 13, 0, 0, 0);

                            }
                            else {
                                data.appointmentData.endDate = new Date(year, month, day, 17, 0, 0, 0);
                            }
                            var testDate = data.appointmentData.endDate;
                            form.getEditor("endDateEditor").option("value", testDate);
                            //showToast("Holiday finsh time set to " + testDate, testDate, "info");
                        }
                    }
                }

            ,
            {
                dataField: "StatusKey",
                editorType: "dxSelectBox",
                editorOptions: {
                    dataSource: [{ "ID": 0, "Status": "Requested" }, { "ID": 1, "Status": "Granted" }, { "ID": 2, "Status": "Denied" }, { "ID": 3, "Status": "Delayed" }],
                    valueExpr: "ID",
                    displayExpr: "Status",
                    value: SelectTypeId,
                    readOnly: DisplayReadOnly
                }
                }

                ,
                {
                    dataField: "Text",
                    editorType: "dxTextArea",
                    //height: "80px",
                    editorOptions: {
                        valueExpr: "Text",
                        readOnly: NewAppointmentOrAdminReadState,
                        displayExpr: "Text",
                        value: HolidayAppointment.Text
                    }
                }
            ]);
    }

    function showToast(event, value, type) {
        DevExpress.ui.notify(event + " \"" + value + "\"" + " task", type, 800);
    }

    function showToast2(value) {

        DevExpress.ui.notify(value, "info", 3600);
    }

    function InsertData(e) {

        var data = { // to be replaced with form values
//            AppointmentId: e.appointmentData.AppointmentId,
            AppointmentId: 0,
            Text: e.appointmentData.Text,
            Description: e.appointmentData.Description,
            StartDate: e.appointmentData.StartDate,
            EndDate: e.appointmentData.EndDate,
            AllDay: e.appointmentData.AllDay,
            RecurrenceRule: e.appointmentData.RecurrenceRule,
            DepartmentID: e.appointmentData.DepartmentID,
            StatusKey: e.appointmentData.StatusKey,
            UserID: e.appointmentData.UserID,
            HolidaysTaken: e.appointmentData.HolidaysTaken,
            Duration: e.appointmentData.Duration,
            StartPeriod: e.appointmentData.StartPeriod,
            EndPeriod: e.appointmentData.EndPeriod
        };


        $.ajax({
            type: "POST",
            url: "@Url.Action("Post", "Home")",
            contentType: "application/json",
            dataType: "json",
            data:  JSON.stringify(data),
            success: function (response) {
                showToast("Insert new appointment", "", "");
//                alert('done');
            },
            error: function (response) {
                alert(response);
            }
        });
    }


    function EditedData(e) {

        var data = { // to be replaced with form values
            AppointmentId: e.appointmentData.AppointmentId,
            Text: e.appointmentData.Text,
            Description: e.appointmentData.Description,
            StartDate: e.appointmentData.StartDate,
            EndDate: e.appointmentData.EndDate,
            AllDay: e.appointmentData.AllDay,
            RecurrenceRule: e.appointmentData.RecurrenceRule,
            DepartmentID: e.appointmentData.DepartmentID,
            StatusKey: e.appointmentData.StatusKey,
            UserID: e.appointmentData.UserID,
            HolidaysTaken: e.appointmentData.HolidaysTaken,
            Duration: e.appointmentData.Duration,
            StartPeriod: e.appointmentData.StartPeriod,
            EndPeriod: e.appointmentData.EndPeriod
        };

        $.ajax({
            type: "PUT",
            url: "@Url.Action("Put", "Home")",
            contentType: "application/json",
            dataType: "json",
            data:  JSON.stringify(data),
            success: function (response) {
                showToast("Appointment updated", "", "");
            },
            error: function (response) {
                alert(response);
            }
        });
    }


    function setDataSource(e) {
        //this one fies the event
        //$.post("Home/WebAPIService");
        alert(1);
        //var scheduler = $("#scheduler").dxScheduler("getDataSource");
        var scheduler = $("#scheduler");
        alert(2);
        alert(scheduler);
        @*var AppointmentData2 = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(DataA));*@
//        $.post("ApiControllers/SchedulerData/Index");
//        $.post("SchedulerData/Index");
        //Controller("SchedulerData").GetJSONJQuery()
        //AppointmentData = dataSource
    }

    function SelectAppointment(e) {
      alert(dataSource.typeof);
    }

    function getTrue() {
        return false
    }

    function getSchedulerInstance() {
        return $("#scheduler").dxScheduler("instance");
    }



</script>