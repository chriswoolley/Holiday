#pragma checksum "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\Home\Scheduler.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eb8ff11989712ef63a62991cfb2fad1f23334e1e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Scheduler), @"mvc.1.0.view", @"/Views/Home/Scheduler.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Scheduler.cshtml", typeof(AspNetCore.Views_Home_Scheduler))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\_ViewImports.cshtml"
using HolidayWeb;

#line default
#line hidden
#line 2 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\_ViewImports.cshtml"
using HolidayWeb.Models;

#line default
#line hidden
#line 3 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\_ViewImports.cshtml"
using HolidayWeb.ViewModels;

#line default
#line hidden
#line 4 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 5 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\_ViewImports.cshtml"
using HolidayWeb.Models.Interface;

#line default
#line hidden
#line 6 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\_ViewImports.cshtml"
using HolidayWeb.Controllers;

#line default
#line hidden
#line 10 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc;

#line default
#line hidden
#line 1 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\Home\Scheduler.cshtml"
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"eb8ff11989712ef63a62991cfb2fad1f23334e1e", @"/Views/Home/Scheduler.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"08f9652131acdbd25428686e41c39b44760ec267", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Scheduler : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<Appointment>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(163, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 6 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\Home\Scheduler.cshtml"
  
    bool isUserLoggedIn = ViewBag.Users != null;
    string currentID = runtime.currentUserId;

#line default
#line hidden
            BeginContext(269, 53, true);
            WriteLiteral("\r\n\r\n<script type=\"text/javascript\">\r\n    var test2 =\'");
            EndContext();
            BeginContext(323, 21, false);
#line 13 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\Home\Scheduler.cshtml"
           Write(runtime.currentUserId);

#line default
#line hidden
            EndContext();
            BeginContext(344, 109, true);
            WriteLiteral("\';\r\n</script>\r\n\r\n<div class=\"row\">\r\n\r\n    <h2></h2>\r\n\r\n    <br />\r\n    <br />\r\n    <br />\r\n    <br />\r\n\r\n    ");
            EndContext();
            BeginContext(454, 9, false);
#line 25 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\Home\Scheduler.cshtml"
Write(currentID);

#line default
#line hidden
            EndContext();
            BeginContext(463, 8, true);
            WriteLiteral("\r\n\r\n    ");
            EndContext();
            BeginContext(473, 3470, false);
#line 27 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\Home\Scheduler.cshtml"
Write(Html.DevExtreme().Scheduler()
        .ID("scheduler")
        .DataSource(Model)
        .TextExpr("Description")
        .StartDateExpr("StartDate")
        .EndDateExpr("EndDate")
        //.Disabled()
        //                                                                    .Views(new SchedulerViewType[] { SchedulerViewType.Day, SchedulerViewType.TimelineMonth, SchedulerViewType.WorkWeek, SchedulerViewType.Week, SchedulerViewType.Agenda })
        .Views(new SchedulerViewType[] { SchedulerViewType.Week })
        .CurrentView(SchedulerViewType.Week)
        .CurrentDate(new DateTime(2019, 3, 7))
        .FirstDayOfWeek(FirstDayOfWeek.Sunday)

        .OnAppointmentClick("SetProtection")
        .OnAppointmentDblClick("SetProtection")

        .Option("editing.allowResizing", false)
        .Option("editing.allowDragging", false)
        .OnAppointmentAdded("InsertData")

        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/

        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/

        .StartDayHour(9)
        .EndDayHour(18)
        .CellDuration(120)
        .MaxAppointmentsPerCell(5)
        .OnAppointmentFormOpening("appointmentForm_created")

        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/
        /**/

        .Resources(res =>
        {
            res.Add()
.FieldExpr("StartPeriod")
.AllowMultiple(false)
.Label("Start Period")
.DataSource
(new object[] {

new { id = 0, text = "Morning" },
new { id = 1, text = "Afternoon" }});

            res.Add()
.FieldExpr("EndPeriod")
.AllowMultiple(false)
.Label("End Period")
.DataSource
(new object[] {
new { id = 0, text = "Morning"},
new { id = 1, text = "Afternoon"}});

            res.Add()
.FieldExpr("StatusKey")
.AllowMultiple(false)
.Label("Status")
.DataSource
(new object[] {
new { id = 0, text = "Requested"},
new { id = 1, text = "Confirmed"},
new { id = 2, text = "Denied"}
                                                                                                                                                                                                                                                                                                                                                    });

            res.Add()
.FieldExpr("UserID")
.AllowMultiple(false)
.ColorExpr("colorHighlight")
.Label("remove me")
.DataSource(userManager.Users.ToList()).DisplayExpr("UserName").ValueExpr("Id");

            res.Add()
.FieldExpr("UserID")
.AllowMultiple(false)
.Label("User")
.DataSource(userManager.Users.ToList()).DisplayExpr("UserName").ValueExpr("Id");

        }
        ).Height(580)
    );

#line default
#line hidden
            EndContext();
            BeginContext(5480, 10, true);
            WriteLiteral("\r\n\r\n\r\n    ");
            EndContext();
            BeginContext(5491, 9, false);
#line 208 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\Home\Scheduler.cshtml"
Write(currentID);

#line default
#line hidden
            EndContext();
            BeginContext(5500, 57, true);
            WriteLiteral("\r\n</div>\r\n\r\n<script>\r\n\r\n    var HolidayAppointmentData = ");
            EndContext();
            BeginContext(5558, 60, false);
#line 213 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\Home\Scheduler.cshtml"
                            Write(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)));

#line default
#line hidden
            EndContext();
            BeginContext(5618, 21, true);
            WriteLiteral(";\r\n\r\n    var Users = ");
            EndContext();
            BeginContext(5640, 72, false);
#line 215 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\Home\Scheduler.cshtml"
           Write(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(userManager.Users)));

#line default
#line hidden
            EndContext();
            BeginContext(5712, 11060, true);
            WriteLiteral(@";

//    var test1 = $runtime.currentUserId;


    function getSchedulerInstance() {
        return $(""#scheduler"").dxScheduler(""instance"");
    }

    function getAppointmentById(id) {
        return DevExpress.data.query(HolidayAppointmentData)
            .filter(""AppointmentId"", id)
            .toArray()[0]
    }


    function SetProtection(data) {
        scheduler = $(""#scheduler"").dxScheduler(""instance"");
        //alert(scheduler);

        //alway disabled
        //scheduler.Option(""editing.allowResizing"", false);
        //scheduler.Option(""editing.allowDragging"", false);

        //scheduler.Option(""editing.allowDeleting"", true);
        //scheduler.Option(""editing.allowAdding"", true);
        //scheduler.Option(""editing.allowUpdating"", false);

        //Depends on user
        //scheduler.Option(""editing.allowDeleting"", true);
        //scheduler.Option(""editing.allowAdding"", isUserLoggedIn);
        //scheduler.Option(""editing.allowUpdating"", true);
        //a");
            WriteLiteral(@"lert(scheduler.Option);
    }


    function appointmentForm_created(data) {
        var form = data.form,
            HolidayAppointment = getAppointmentById(data.appointmentData.AppointmentId) || {},
            startDate = data.appointmentData.StartDate,
            endDate = data.appointmentData.EndDate,
            users = Users;

        form.option(
            ""items"", [
                {
                    //dataField: ""users.ID"",
                    dataField: ""UserID"",
                    editorType: ""dxSelectBox"",
                    name: ""userEditor"",
                    editorOptions: {
                        dataSource: Users,
                        displayExpr: ""UserName"",
                        valueExpr: ""Id"",
                        value: HolidayAppointment.UserID,
                    //                        startDate = args.value;
                    //                        form.getEditor(""EndDate"")
                    //                            .optio");
            WriteLiteral(@"n(""value"", new Date(startDate.getTime() +
                    //                                60 * 1000 * movie.Duration));

                }
            }
            ,
            {
                dataField: ""StartDate"",
                editorType: ""dxDateBox"",
                name: ""startDateEditor"",
                editorOptions: {
                    value: startDate,
                    width: ""100%"",
                    type: ""date"",
                    editorOptions: { format:""date""},
                    onValueChanged: function (args) {
                        startDate = args.value;
                        //                        form.getEditor(""EndDate"")
                        //                            .option(""value"", new Date(startDate.getTime() +
                        //                                60 * 1000 * movie.Duration));
                    }
                }
                }
            ,
            {
                dataField: ""StartPeriod"",
");
            WriteLiteral(@"                editorType: ""dxSelectBox"",
                editorOptions: {
                    dataSource: [{ ""ID"": 0, ""periodName"": ""Morning"" }, { ""ID"": 1, ""periodName"": ""Afternoon"" }],
                    valueExpr: ""ID"",
                    displayExpr: ""periodName"",
                    value: HolidayAppointment.StartPeriod,
                    onValueChanged: function (args) {
                        var startDate = data.appointmentData.StartDate;
                        var startEditor = form.getEditor(""startDate"");
                        var year = startDate.getFullYear();
                        var month = startDate.getMonth();
                        var day = startDate.getDate();
                        if (args.value === 0) {
                            data.appointmentData.startDate = new Date(year, month, day, 9, 0, 0, 0);

                        }
                        else {
                            data.appointmentData.startDate = new Date(year, month, day, 13, 0, 0, 0");
            WriteLiteral(@");
                        }
                        var testDate = data.appointmentData.startDate;
                        form.getEditor(""startDateEditor"").option(""value"", testDate);
                        showToast(""Holiday start time set to "" + testDate, testDate, ""info"");
                    }
                }
            }

            ,
            {
                dataField: ""EndDate"",
                editorType: ""dxDateBox"",
                name: ""endDateEditor"",
                editorOptions: {
                    value: endDate,
                    width: ""100%"",
                    //type: ""date"",
                    type: ""datetime"",
                    onValueChanged: function (args) {
                    //    startDate = args.value;
                    //    //                        form.getEditor(""EndDate"")
                    //    //                            .option(""value"", new Date(startDate.getTime() +
                    //    //                             ");
            WriteLiteral(@"   60 * 1000 * movie.Duration));
                    }
                }
            }

                ,
                {
                    dataField: ""EndPeriod"",
                    editorType: ""dxSelectBox"",
                    helpText: ""when it ends"",
                    editorOptions: {
                        dataSource: [{ ""ID"": 0, ""periodName"": ""Morning"" }, { ""ID"": 1, ""periodName"": ""Afternoon"" }],
                        valueExpr: ""ID"",
                        displayExpr: ""periodName"",
                        value: HolidayAppointment.EndPeriod,
                        onValueChanged: function (args) {
                            var endDate = data.appointmentData.EndDate;
                            var startEditor = form.getEditor(""startDate"");
                            var year = startDate.getFullYear();
                            var month = startDate.getMonth();
                            var day = startDate.getDate();
                            if (args.value ===");
            WriteLiteral(@" 0) {
                                data.appointmentData.endDate = new Date(year, month, day, 13, 0, 0, 0);

                            }
                            else {
                                data.appointmentData.endDate = new Date(year, month, day, 17, 0, 0, 0);
                            }
                            var testDate = data.appointmentData.endDate;
                            form.getEditor(""endDateEditor"").option(""value"", testDate);
                            showToast(""Holiday finsh time set to "" + testDate, testDate, ""info"");
                        }
                    }
                }

            ,
            {
                dataField: ""StatusKey"",
                editorType: ""dxSelectBox"",
                editorOptions: {
                    dataSource: [{ ""ID"": 0, ""Status"": ""Requested"" }, { ""ID"": 1, ""Status"": ""Granted"" }, { ""ID"": 2, ""Status"": ""Denied"" }, { ""ID"": 3, ""Status"": ""Delayed"" }],
                    valueExpr: ""ID"",
                ");
            WriteLiteral(@"    displayExpr: ""Status"",
                    value: HolidayAppointment.StartPeriod
                    //                    onValueChanged: function (args) {
                    //                        showToast(""Posted"", args.Id, ""info"");
                    //                        startDate = args.value;
                    //                        form.getEditor(""EndDate"")
                    //                            .option(""value"", new Date(startDate.getTime() +
                    //                                60 * 1000 * movie.Duration));
                    //                    }
                }
                }

                ,
                {
                    dataField: ""Text"",
                    editorType: ""dxTextArea"",
                    //height: ""80px"",
                    editorOptions: {
                        valueExpr: ""Text"",
                        displayExpr: ""Text"",
                        value: HolidayAppointment.Text
              ");
            WriteLiteral(@"          //                    onValueChanged: function (args) {
                        //                        showToast(""Posted"", args.Id, ""info"");
                        //                        startDate = args.value;
                        //                        form.getEditor(""EndDate"")
                        //                            .option(""value"", new Date(startDate.getTime() +
                        //                                60 * 1000 * movie.Duration));
                        //                    }
                    }
                }

            //,
            //{
            //    label: {
            //        text: HolidayAppointment.AppointmentId + "":"" + HolidayAppointment.StartPeriod +"":""+ HolidayAppointment.EndPeriod
            //    },
            //    name: ""users.UserName"",
            //    editorType: ""dxTextBox"",
            //    editorOptions: {
            //        value: users.UserName,
            //        readOnly: true
    ");
            WriteLiteral(@"        //    }
            //}
            ]);

//        showToast(""Posted"", ""333"", ""info"");
        //showToast(""Posted"", test1, ""info"");
        
//        if (ViewData[""currentUserID""] != """") {
//            form.getEditor(""userEditor"").option(""value"", ViewBag.currentUser.Id);
            //            HolidayAppointment.UserID = ViewBag.currentUser.Id);
            //HolidayAppointment.UserID = """");

        //showToast(""Posted"", ""sfdsdffsdf"", ""info"");
        showToast2(""zzzzzzzzzzzzzzzzzzzz "" + test2);
    }

    function showToast(event, value, type) {
        DevExpress.ui.notify(event + "" \"""" + value + ""\"""" + "" task"", type, 800);
    }

    function showToast2(value) {
//        var fred = currentID;
        DevExpress.ui.notify(value, ""info"", 1800);
    }

    function InsertData(e) {

        var data = { // to be replaced with form values
//            AppointmentId: e.appointmentData.AppointmentId,
            AppointmentId: 0,
            Text: e.appointmentData.T");
            WriteLiteral(@"ext,
            Description: e.appointmentData.Description,
            StartDate: e.appointmentData.StartDate,
            EndDate: e.appointmentData.EndDate,
            AllDay: e.appointmentData.AllDay,
            RecurrenceRule: e.appointmentData.RecurrenceRule,
            DepartmentID: e.appointmentData.DepartmentID,
            StatusKey: e.appointmentData.StatusKey,
            UserID: e.appointmentData.UserID,
            HolidaysTaken: e.appointmentData.HolidaysTaken,
            Duration: e.appointmentData.Duration,
            StartPeriod: e.appointmentData.StartPeriod,
            EndPeriod: e.appointmentData.EndPeriod
        };

        //alert(JSON.stringify(data));
        //console.log(JSON.stringify(data));

        $.ajax({
            type: ""POST"",
            url: """);
            EndContext();
            BeginContext(16773, 26, false);
#line 471 "C:\HolidayManager\DevExtremeAspNetCoreApp3\Views\Home\Scheduler.cshtml"
             Write(Url.Action("Post", "Home"));

#line default
#line hidden
            EndContext();
            BeginContext(16799, 681, true);
            WriteLiteral(@""",
            contentType: ""application/json"",
            dataType: ""json"",
            data:  JSON.stringify(data),
            success: function (response) {
                showToast(""Insert new appointment"", """", """");
//                alert('done');
            },
            error: function (response) {
                alert(response);
            }
        });
    }

    function setDataSource(e) {
        //this one fies the event
        //$.post(""Home/WebAPIService"");
        alert(1);
        //var scheduler = $(""#scheduler"").dxScheduler(""getDataSource"");
        var scheduler = $(""#scheduler"");
        alert(2);
        alert(scheduler);
");
            EndContext();
            BeginContext(17579, 451, true);
            WriteLiteral(@"//        $.post(""ApiControllers/SchedulerData/Index"");
//        $.post(""SchedulerData/Index"");
        //Controller(""SchedulerData"").GetJSONJQuery()
        //AppointmentData = dataSource
    }

    function SelectAppointment(e) {
      alert(dataSource.typeof);
    }

    function getTrue() {
        return false
    }

    function getSchedulerInstance() {
        return $(""#scheduler"").dxScheduler(""instance"");
    }
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IRuntime runtime { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public UserManager<HolidayUser> userManager { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<Appointment>> Html { get; private set; }
    }
}
#pragma warning restore 1591
