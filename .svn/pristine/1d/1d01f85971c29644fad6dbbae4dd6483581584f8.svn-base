@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@model IEnumerable<Appointment>
@inject UserManager<HolidayUser> userManager

@{
    bool isUserLoggedIn = ViewBag.Users != null;
}

<div class="row">

    <h2></h2>

    @(Html.DevExtreme().Scheduler()
.ID("scheduler")
.DataSource(Model)
.TextExpr("Description")
.StartDateExpr("StartDate")
.EndDateExpr("EndDate")
//.Disabled()
//                                                                    .Views(new SchedulerViewType[] { SchedulerViewType.Day, SchedulerViewType.TimelineMonth, SchedulerViewType.WorkWeek, SchedulerViewType.Week, SchedulerViewType.Agenda })
.Views(new SchedulerViewType[] { SchedulerViewType.Week, SchedulerViewType.TimelineMonth })
.CurrentView(SchedulerViewType.Week)
.CurrentDate(new DateTime(2019, 3, 7))
.FirstDayOfWeek(FirstDayOfWeek.Sunday)

//.Option("editing.allowResizing", false)
//.Option("editing.allowDragging", false)
//.Option("editing.allowDeleting", isUserLoggedIn)
//.Option("editing.allowAdding", isUserLoggedIn)
//.Option("editing.allowUpdating", isUserLoggedIn)
//.Disabled(new JS("testJs"))
//.OnContentReady("setDataSource")
//.OnAppointmentClick("setDataSource")

.OnAppointmentAdded("InsertData")

/**/
/**/
/**/
/**/
/**/
/**/
/**/
@*.OnAppointmentClick(@<text>
function(data) {
var value = data.value;
alert(1);
getSchedulerInstance().option("editing.allowUpdating", getTrue);
getSchedulerInstance().option("editing.allowDragging", getTrue);
getSchedulerInstance().option("editing.allowAdding", getTrue);
getSchedulerInstance().option("editing.allowUpdating", getTrue);

}
</text>)*@
/**/
/**/
/**/
/**/
/**/
/**/
/**/

.StartDayHour(9)
.EndDayHour(18)
.CellDuration(120)
.MaxAppointmentsPerCell(5)

.OnAppointmentFormOpening("appointmentForm_created")

//.OnAppointmentAdded(@<text>
//function(e) {
//@*//InsertData(e.appointmentData.Text);*@
//InsertData(e.appointmentData);
//showToast("Added", e.appointmentData.StartDate, "success");
//}
//</text>)
.OnAppointmentUpdated(@<text>
function(e) {
showToast("Updated", e.appointmentData.Text, "info");
}
</text>)
.OnAppointmentDeleted(@<text>
function(e) {
showToast("Deleted", e.appointmentData.Text, "warning");
}
</text>)

.Resources(res =>
{
res.Add()
.FieldExpr("StartPeriod")
.AllowMultiple(false)
.Label("Start Period")
.DataSource
(new object[] {

new { id = 0, text = "Morning" },
new { id = 1, text = "Afternoon" }});

res.Add()
.FieldExpr("EndPeriod")
.AllowMultiple(false)
.Label("End Period")
.DataSource
(new object[] {
new { id = 0, text = "Morning"},
new { id = 1, text = "Afternoon"}});

res.Add()
.FieldExpr("StatusKey")
.AllowMultiple(false)
.Label("Status")
.DataSource
(new object[] {
new { id = 0, text = "Requested"},
new { id = 1, text = "Confirmed"},
new { id = 2, text = "Denied"}
                                                                                                                                                                                                                                                                                                                    });

res.Add()
.FieldExpr("UserID")
.AllowMultiple(false)
.ColorExpr("colorHighlight")
.Label("remove me")
.DataSource(userManager.Users.ToList()).DisplayExpr("UserName").ValueExpr("Id");

res.Add()
.FieldExpr("UserID")
.AllowMultiple(false)
.Label("User")
.DataSource(userManager.Users.ToList()).DisplayExpr("UserName").ValueExpr("Id");

}
).Height(580)
)
</div>

<script>

    var HolidayAppointmentData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    var Users = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(userManager.Users));

    function getSchedulerInstance() {
        return $("#scheduler").dxScheduler("instance");
    }

    function getAppointmentById(id) {
        return DevExpress.data.query(HolidayAppointmentData)
            .filter("AppointmentId", id)
            .toArray()[0]
    }

    function appointmentForm_created(data) {
        var form = data.form,
            HolidayAppointment = getAppointmentById(data.appointmentData.AppointmentId) || {},
            startDate = data.appointmentData.StartDate,
            //endDate = data.appointmentData.EndDate;
            endDate = data.appointmentData.EndDate,
            users = Users;

        form.option(
            "items", [
                {
                    //dataField: "users.ID",
                    dataField: "UserID",
                    editorType: "dxSelectBox",
                    editorOptions: {
                        dataSource: Users,
                        displayExpr: "UserName",
                        valueExpr: "Id",
                        value: HolidayAppointment.UserID,
                    //                        startDate = args.value;
                    //                        form.getEditor("EndDate")
                    //                            .option("value", new Date(startDate.getTime() +
                    //                                60 * 1000 * movie.Duration));

                }
            }
            ,
            {
                dataField: "StartDate",
                editorType: "dxDateBox",
                editorOptions: {
                    value: startDate,
                    width: "100%",
                    type: "datetime",
                    onValueChanged: function (args) {
                        startDate = args.value;
                        //                        form.getEditor("EndDate")
                        //                            .option("value", new Date(startDate.getTime() +
                        //                                60 * 1000 * movie.Duration));
                    }
                }
                }
            ,
            {
                dataField: "StartPeriod",
                editorType: "dxSelectBox",
                editorOptions: {
                    dataSource: [{ "ID": 0, "periodName": "Morning" }, { "ID": 1, "periodName": "Afternoon" }],
                    valueExpr: "ID",
                    displayExpr: "periodName",
                    value: HolidayAppointment.StartPeriod
                    //                    onValueChanged: function (args) {
                    //                        showToast("Posted", args.Id, "info");
                    //                        startDate = args.value;
                    //                        form.getEditor("EndDate")
                    //                            .option("value", new Date(startDate.getTime() +
                    //                                60 * 1000 * movie.Duration));
                    //                    }
                }
            }

            ,
            {
                dataField: "EndDate",
                editorType: "dxDateBox",
                editorOptions: {
                    value: endDate,
                    width: "100%",
                    type: "datetime",
                    onValueChanged: function (args) {
                        startDate = args.value;
                        //                        form.getEditor("EndDate")
                        //                            .option("value", new Date(startDate.getTime() +
                        //                                60 * 1000 * movie.Duration));
                    }
                }
            }

                ,
                {
                    dataField: "EndPeriod",
                    editorType: "dxSelectBox",
                    editorOptions: {
                        dataSource: [{ "ID": 0, "periodName": "Morning" }, { "ID": 1, "periodName": "Afternoon" }],
                        valueExpr: "ID",
                        displayExpr: "periodName",
                        value: HolidayAppointment.EndPeriod
                        //                    onValueChanged: function (args) {
                        //                        showToast("Posted", args.Id, "info");
                        //                        startDate = args.value;
                        //                        form.getEditor("EndDate")
                        //                            .option("value", new Date(startDate.getTime() +
                        //                                60 * 1000 * movie.Duration));
                        //                    }
                    }
                }
            ,
            {
                dataField: "StatusKey",
                editorType: "dxSelectBox",
                editorOptions: {
                    dataSource: [{ "ID": 0, "Status": "Requested" }, { "ID": 1, "Status": "Granted" }, { "ID": 2, "Status": "Denied" }, { "ID": 3, "Status": "Delayed" }],
                    valueExpr: "ID",
                    displayExpr: "Status",
                    value: HolidayAppointment.StartPeriod
                    //                    onValueChanged: function (args) {
                    //                        showToast("Posted", args.Id, "info");
                    //                        startDate = args.value;
                    //                        form.getEditor("EndDate")
                    //                            .option("value", new Date(startDate.getTime() +
                    //                                60 * 1000 * movie.Duration));
                    //                    }
                }
            }
            ,
            {
                label: {
                    text: HolidayAppointment.AppointmentId + ":" + HolidayAppointment.StartPeriod +":"+ HolidayAppointment.EndPeriod
                },
                name: "users.UserName",
                editorType: "dxTextBox",
                editorOptions: {
                    value: users.UserName,
                    readOnly: true
                }
            }
        ]);
    }

    function showToast(event, value, type) {
        DevExpress.ui.notify(event + " \"" + value + "\"" + " task", type, 800);
    }

    function InsertData(e) {

        alert(e.appointmentData.UserID);
        alert(e.appointmentData.StartDate);
        alert(e.appointmentData.EndDate);
        alert(e.appointmentData.StartPeriod);
        alert(e.appointmentData.EndPeriod);
        alert(e.appointmentData.Text);
        //$.post("/Post/", { "Hello"});
        //$.ajax({
        //    type: "Post",
        //    data: JSON.stringify(e.appointmentData),
        //    url: "Home/Post",
        //    contentType: "application/json; charset=utf-8",
        //    processData: true,
        //    cache: false,
        //    error: function (jqXHR, textStatus, errorThrown) {
        //        alert("Something went wrong!");
        //    },
        //    success: function (result) {
        //        getData();
        //        $("#add-name").val("");
        //    }
        //})

    }

    function setDataSource(e) {
        //this one fies the event
        //$.post("Home/WebAPIService");
        alert(1);
        //var scheduler = $("#scheduler").dxScheduler("getDataSource");
        var scheduler = $("#scheduler");
        alert(2);
        alert(scheduler);
        @*var AppointmentData2 = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(DataA));*@
//        $.post("ApiControllers/SchedulerData/Index");
//        $.post("SchedulerData/Index");
        //Controller("SchedulerData").GetJSONJQuery()
        //AppointmentData = dataSource
    }

    function SelectAppointment(e) {
      alert(dataSource.typeof);
    }

    function getTrue() {
        return true
    }

    function getSchedulerInstance() {
        return $("#scheduler").dxScheduler("instance");
    }
</script>